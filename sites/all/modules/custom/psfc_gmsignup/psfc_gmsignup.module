<?php
function psfc_gmsignup_permission() {
  return array(
    'administer GM signup' => array(
    'title' => t('Administer General Meeting Signup'),
    'description' => t('Allow a user to change General Meeting information.'),
    ),
  );

}
function psfc_gmsignup_menu()
{
	$items['gmsignup'] = array(
	'title' => 'General Meeting Signup Form',
	'description' => 'PSFC General Meeting Signup Form',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('psfc_gmsignup_form'),
	'access callback' => TRUE
	);
	$items['admin/psfc/gmsignup'] = array(
	'title' => 'General Meeting Signup Administration',
	'description' => 'PSFC General Meeting Signup Admin page',
	'page callback' => 'psfc_gmsignup_admin_page',
	'access callback' => TRUE,
  'accss arguments' => array('administer GM signup'),
  'file' => 'psfc_gmsignup.admin.inc',
	);

	return $items;
}

function psfc_gmsignup_form_user_login_alter(&$form, &$form_state, $form_id) {
  if (isset($_GET['redirect']) && $_GET['redirect'] == 'gmsignup') {
    $form['#submit'][] = 'psfc_gmsignup_post_login_redirect';
  }
}

function psfc_gmsignup_post_login_redirect() {
  drupal_goto('gmsignup');
}


function psfc_gmsignup_form($form, &$form_state)
{
	global $user;
	if ($user->uid == 0) {
    drupal_goto('user', array('query' => array('redirect' => 'gmsignup')));
  }

	$result = db_query('SELECT fgmd.field_gm_date_value, n.nid FROM {field_data_field_gm_date} fgmd JOIN node n ON fgmd.bundle=n.type AND fgmd.revision_id=n.vid WHERE fgmd.field_gm_date_value > UNIX_TIMESTAMP() ORDER BY fgmd.field_gm_date_value LIMIT 1');

$no_upcoming_mtg_markup = array(
	      '#type' => 'markup',
        '#markup' => '<div style="font-size: 14pt; font-weight: bold;">'. t('The next General Meeting hasn\'t been scheduled. Please check back in a little while.') .'</div>',
  	  );


  if ($result->rowCount() == 0) {
    $form['text_top'] = $no_upcoming_mtg_markup;

    return $form;
  }
  elseif ($result->rowCount() == 1) {
    $time = time();
    /* $days45 = strtotime('+45 days') - $time; */
    /* $days20 = strtotime('+20 days') - $time; */
    $gm = $result->fetchAssoc();
    $gmdate = $gm['field_gm_date_value'];
    $gm_date_formatted = date('l F j, Y \a\t g:i a', $gmdate);


    // first check if the user has already signed up
    $signed_up_result = db_query('SELECT COUNT(*) FROM {node} n JOIN {field_data_field_gm} gm ON gm.entity_id = n.nid AND gm.revision_id = n.vid WHERE gm.field_gm_nid = :nid and n.uid=:uid', array(':nid' => $gm['nid'], ':uid' => $user->uid))->fetchAssoc();
    $signed_up_count = $signed_up_result['COUNT(*)'];
    if ($signed_up_count > 0) {
      $form['text_top'] = array(
	      '#type' => 'markup',
        '#markup' => '<div style="font-size: 14pt; font-weight: bold;">'. t('It appears that you have already signed up for the next upcoming  meeting scheduled for '. $gm_date_formatted) .'</div>',
  	  );
      return $form;

    }
    // check if it is after 5pm of the date of the metting
    elseif (date('H') > 17 && date('Y-m-d', $gmdate) == date('Y-m-d')) {
      $form['text_top'] = array(
	      '#type' => 'markup',
        '#markup' => '<div style="font-size: 14pt; font-weight: bold;">'. t('GM Attendance signup closes at 5 pm on the day of the General Meeting. Sign up for next month\'s General Meeting will be available after midnight of the day of the meeting.') .'</div>',
  	  );
      return $form;
    }
    // check if it is more than 20 days away but less than 45.
    //commen pending removal 10/1/12 nat
    /* elseif ((($gmdate - $time) > $days45) || (($gmdate - $time) < $days20)) { */
    /*   $form['text_top'] = $no_upcoming_mtg_markup; */
    /*   return $form; */
    /* } */

	$form['gmid'] = array(
	'#type' => 'value',
	'#value' => $gm['nid']
	);

	$form['text_top'] = array(
	'#type' => 'markup',
    '#markup' => '<div style="font-size: 14pt; font-weight: bold;">General Meeting on ' . $gm_date_formatted . '</div><div style="margin-bottom: 20px;">Please provide the information below for the person who will actually be ATTENDING the GM:</div>'
  	);

	$form['first_name'] = array(
    '#type' => 'textfield',
    '#title' => 'First Name',
    '#size' => 20,
    '#maxlength' => 50,
    '#required' => TRUE
  	);

  	$form['last_name'] = array(
    '#type' => 'textfield',
    '#title' => 'Last Name',
    '#size' => 20,
    '#maxlength' => 50,
    '#required' => TRUE
  	);

  	/*
  	$form['email'] = array(
    '#type' => 'textfield',
    '#title' => 'Email',
    '#size' => 20,
    '#maxlength' => 50,
    '#required' => TRUE
  	);
  	*/

  	$form['member_number'] = array(
    '#type' => 'textfield',
    '#title' => 'Member Number',
    '#size' => 20,
    '#maxlength' => 10,
    '#required' => TRUE
  	);

  	$form['credit'] = array(
    '#type' => 'radios',
    '#options' => array('credit_attendee' => 'and will also receive the workslot credit for meeting attendance.', 'credit_other' => '<b>but</b> the work credit should be applied to another member\'s record.'),
    '#default_value' => 'credit_attendee',
    '#required' => TRUE,
    // '#prefix' => '<div style="border: 1px solid orange; padding: 5px;">',
    // '#suffix' => '</div>',
  	);

  	$form['other_member'] = array(
    '#type' => 'fieldset',
    '#title' => t('Apply credit to this member:'),
    '#states' => array('visible' => array(':input[name="credit"]' => array('value' => 'credit_other')))
  	);

  	$form['other_member']['first_name_credit'] = array(
    '#type' => 'textfield',
    '#title' => 'First Name',
    '#size' => 20,
    '#maxlength' => 50,
    '#states' => array('required' => array(':input[name="credit"]' => array('value' => 'credit_other')), 'visible' => array(':input[name="credit"]' => array('value' => 'credit_other')))
  	);

  	$form['other_member']['last_name_credit'] = array(
    '#type' => 'textfield',
    '#title' => 'Last Name',
    '#size' => 20,
    '#maxlength' => 50,
    '#states' => array('required' => array(':input[name="credit"]' => array('value' => 'credit_other')), 'visible' => array(':input[name="credit"]' => array('value' => 'credit_other')))
  	);

  	$form['other_member']['member_number_credit'] = array(
    '#type' => 'textfield',
    '#title' => 'Member Number',
    '#size' => 20,
    '#maxlength' => 10,
    '#states' => array('required' => array(':input[name="credit"]' => array('value' => 'credit_other')), 'visible' => array(':input[name="credit"]' => array('value' => 'credit_other')))
  	);

  	$form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Sign Up for General Meeting')
  	);

  	return $form;
  }
}

function psfc_gmsignup_form_validate($form, &$form_state)
{
	// echo '<pre>'; print_r($form_state); echo '</pre>';

	// if ($form_state['values']['first_name'] == '') {form_set_error('first_name', t('First Name required'));}
	// if ($form_state['values']['last_name'] == '') {form_set_error('last_name', t('Last Name required'));}
	// if ($form_state['values']['email'] == '') {form_set_error('email', t('Email required'));}
	// if ($form_state['values']['member_number'] == '') {form_set_error('member_number', t('Member Number required'));}

	$member_number = preg_replace('/[^0-9]/i', '', $form_state['values']['member_number']);
	$form_state['values']['member_number'] = $member_number;
	$form_state['complete form']['member_number']['#value'] = $member_number;

	// form_set_value($form['member_number'], $member_number, $form_state);
	// $form_state['rebuild'] = TRUE;

  // TODO clarify member number length with Jess

	if (!is_numeric($form_state['values']['member_number'])) {form_set_error('member_number', t('Member Number must be numeric'));}
	if (strlen($form_state['values']['member_number']) < 5) {form_set_error('member_number', t('Invalid Member Number'));}

	if ($form_state['values']['credit'] == 'credit_other')
	{
		$member_number_credit = preg_replace('/[^0-9]/i', '', $form_state['values']['member_number_credit']);
		$form_state['values']['member_number_credit'] = $member_number_credit;
		$form_state['complete form']['other_member']['member_number_credit']['#value'] = $member_number_credit;

		if ($form_state['values']['first_name_credit'] == '') {form_set_error('first_name_credit', t('First Name required'));}
		if ($form_state['values']['last_name_credit'] == '') {form_set_error('last_name_credit', t('Last Name required'));}
		if ($form_state['values']['member_number_credit'] == '') {form_set_error('member_number_credit', t('Member Number required'));}

		if (!is_numeric($form_state['values']['member_number_credit'])) {form_set_error('member_number_credit', t('Member Number must be numeric'));}
  // TODO clarify member number length with Jess

		if (strlen($form_state['values']['member_number_credit']) < 5) {form_set_error('member_number_credit', t('Invalid Member Number'));}
	}

	// echo '<pre>'; print_r($form_state); echo '</pre>';
}

function psfc_gmsignup_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  global $user;

  // Create new node
  $node = new stdClass;

  $node->uid = $user->uid;
  $node->type = 'general_meeting_attendee';
  $node->status = 1;
  $node->promote = 0;

  $node->language = 'und';

  $node->field_gm = array(
    'und' => array(
      '0' => array(
        'nid' => $values['gmid'],
      ),
    ),
  );

  $node->field_gm_attendee_first_name = array(
    'und' => array(
      '0' => array(
        'value' => $values['first_name'],
      ),
    ),
  );
  $node->field_gm_attendee_last_name = array(
    'und' => array(
      '0' => array(
        'value' => $values['last_name'],
      ),
    ),
  );
  $node->field_gm_attendee_member_number = array(
    'und' => array(
      '0' => array(
        'value' => $values['member_number'],
      ),
    ),
  );

  $credit_first_val = ($values['credit'] == 'credit_other') ? $values['first_name_credit'] : $values['first_name'];
  $credit_last_val = ($values['credit'] == 'credit_other') ? $values['last_name_credit'] : $values['last_name'];
  $credit_member_num_val = ($values['credit'] == 'credit_other') ? $values['member_number_credit'] : $values['member_number'];

  $node->field_gm_creditee_first_name = array(
    'und' => array(
      '0' => array(
        'value' => $credit_first_val,
      ),
    ),
  );
  $node->field_gm_creditee_last_name = array(
    'und' => array(
      '0' => array(
        'value' => $credit_last_val,
      ),
    ),
  );
  $node->field_gm_creditee_member_number = array(
    'und' => array(
      '0' => array(
        'value' => $credit_member_num_val,
      ),
    ),
  );
  $node->title = t('General Meeting (%gmid) - Attendee: %first %last', array('%gmid' => $values['gmid'], '%first' => $values['first_name'], '%last' => $values['last_name']));

  node_object_prepare($node);
  node_save($node);

	drupal_set_message(t('We have received your request to attend the GM for credit. The Membership Office will review your request in order to confirm your eligibility to receive credit. If you are confirmed, we will send you an e-mail confirmation within 5 days of today.'));
}

