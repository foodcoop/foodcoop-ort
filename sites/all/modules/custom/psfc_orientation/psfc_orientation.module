<?php
/**
 * @file PSFC Orientation module
 */

module_load_include('inc', 'psfc_orientation', 'psfc_orientation.email');
module_load_include('inc', 'psfc_orientation', 'psfc_orientation.nodemap');


/**
 * Implementation of hook_perm().
 */
function psfc_orientation_perm() {
  return array(
    'administer psfc orientation',
    'sign up for psfc orientation'
    );
}

/**
 * Implementation of hook_menu().
 */
function psfc_orientation_menu() {
  $items = array();

  // this should probably live in a generic helper module.
  // it lives here because this module got here first --nat
  $items['admin/psfc'] = array(
    'title' => 'PSFC Admin Page',
    'description' => 'An Admin landing page for psfc pages',
    'access arguments' => array( 'administer psfc orientation'),
    'page callback' => 'psfc_orientation_temp_admin_land',
  );
  $items['admin/psfc/orientation'] = array(
    'title' => 'Orientation',
    'description' => 'Allow coop workers to change orientation settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('psfc_orientation_admin_page'),
    'access callback' => 'user_access',
    'access arguments' => array( 'administer psfc orientation'),
    'file' => 'psfc_orientation.admin.inc',
    'weight' => 10,
    'type' => MENU_DEFUALT_LOCAL_TASK
  );
  $items['admin/psfc/orientation/overview'] = array(
    'title' => 'Orientation Settings',
    'description' => 'Allow coop workers to change orientation settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('psfc_orientation_admin_page'),
    'access callback' => 'user_access',
    'access arguments' => array( 'administer psfc orientation'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'psfc_orientation.admin.inc',
  );
  $items['admin/psfc/orientation/add-rule'] = array(
    'title' => 'Create Orientation Rule',
    'description' => 'Create a new orientation rule.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('psfc_orientation_admin_add_rule'),
    'access arguments' => array( 'administer psfc orientation'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'psfc_orientation.admin.inc',
    'weight' => 8,
  );
  $items['admin/psfc/orientation/delete-rule/%psfc_orientation_orid'] = array(
    'title' => 'Delete Orientation Rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('psfc_orientation_admin_delete_rule', 4),
    'access arguments' => array('administer psfc orientation'),
    'type' => MENU_CALLBACK,
    'file' => 'psfc_orientation.admin.inc',
  );
  $items['admin/psfc/orientation/edit-rule/%psfc_orientation_orid'] = array(
    'title' => 'Edit Orientation Rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('psfc_orientation_admin_edit_rule', 4),
    'access arguments' => array('administer psfc orientation'),
    'type' => MENU_CALLBACK,
    'file' => 'psfc_orientation.admin.inc',
  );
  $items['admin/psfc/orientation/add-blackout'] = array(
    'title' => 'Create a Blackout date',
    'description' => 'Orientations will not be automatically created on this date.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('psfc_orientation_add_blackout'),
    'access arguments' => array( 'administer psfc orientation'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'psfc_orientation.admin.inc',
    'weight' => 10,
  );
  $items['admin/psfc/orientation/delete-blackout/%psfc_orientation_obid'] = array(
    'title' => 'Delete a Blackout Date',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('psfc_orientation_delete_blackout', 4),
    'access arguments' => array('administer psfc orientation'),
    'type' => MENU_CALLBACK,
    'file' => 'psfc_orientation.admin.inc',
  );
  $items['admin/psfc/orientation/add-registrant'] = array(
    'title' => 'Manually sign up a person for orientation',
    'description' => 'Admin users can sign up someone who does not have internet access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('psfc_orientation_add_registrant'),
    'access arguments' => array('administer psfc orientation'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'psfc_orientation.admin.inc',
    'weight' => 11,
  );
  $items['psfc-orientation/autocomplete'] = array(
    'title' => 'User email autocomplete',
    'page callback' => 'psfc_orientation_email_autocomplete',
    'access callback' => 'user_access',
    'access arguments' => array('administer psfc orientation'),
    'type' => MENU_CALLBACK,
    'file' => 'psfc_orientation.admin.inc',
  );
  $items['admin/psfc/orientation/mail'] = array(
    'title' => 'Edit orientation emails',
    'description' => 'Configure default e-mail text for orientation messages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('psfc_orientation_mail_settings'),
    'access arguments' => array('administer psfc orientation'),
    'file' => 'psfc_orientation.email.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 12,
  );
  $items['join/orientation/signup/session/%'] = array(
    'title' => 'Review the Details of Your Orientation Session',
    'description' => 'Let the user check the date',
    'access arguments' => array( 'access content'),
    'page callback' => 'psfc_orientation_signup_session',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
  );
  $items['join/orientation/signup/session/register/%'] = array(
    'title' => 'Do the registration',
    'access arguments' => array( 'access content'),
    'page callback' => 'psfc_orientation_signup_session_register',
    'page arguments' => array(5),
    'type' => MENU_CALLBACK,
  );
  $items['login'] = array(
    'title' => 'Sign in',
    'description' => 'Log in or create an account.',
    'page callback' => 'psfc_orientation_login',
    'access arguments' => array('access content'),
    'file' => 'psfc_orientation.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['join/orientation/status'] = array(
    'title' => 'Your Registration Status',
    'description' => 'Are you signed up for orientation.',
    'page callback' => 'psfc_orientation_status',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['join/orientation/confirmed'] = array(
    'title' => 'Thank you for Confirming your Orientation Registration',
    'page callback' => 'psfc_orientation_confirmed',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['join/orientation/confirm/%/%/%/%'] = array(
    'title' => 'Set registration status',
    'page callback' => 'psfc_orientation_confirm',
    'page arguments' => array(3, 4, 5, 6),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function psfc_orientation_theme() {
  return array(
    'psfc_orientation_login' => array(
      'arguments' => array(),
    ),
    'psfc_orientation_date_table' => array(
      'arguments' => array('date' => NULL),
    ),
    'psfc_orientation_status' => array(
      'arguments' => array(),
    ),
  );
}

/**
 * Implemetation of hook_cron().
 */
function psfc_orientation_cron() {

  // Create orientation based on repeat rules.
  $query = db_query("SELECT * FROM {psfc_orientation_repeat_rules}");
  while ($result = db_fetch_array($query)) {
    if ($result['day_of_week'] == date('l')) {
      $time = psfc_orientation_split_time_of_day($result['orid']);
      $next = psfc_orientation_determine_next_repeat($time);
      $date = date('Y-m-d', $next);
      // The hour needs to be saved GMT so add 4
      $hour = date('H', $next) + 4;
      $time = date(':i:s', $next);
      $time_value = $date .'T'. $hour . $time;
      if (!psfc_orientation_orientation_exists($time_value) && !psfc_orientation_orientation_blacked_out($date) &&  psfc_orientation_orientation_creation_window($next)) {
        $node = psfc_orientation_node_build($result, $time_value);
        if ($node->nid) {
          watchdog('psfc_orientation', 'Added an orientation for: @date', array('@date' => $time_value), WATCHDOG_NOTICE);
        }
      }
    }
  }

  // Delete unconfirmed registrations after 48 hours. By deleting the user we
  // cause hook_nodeapi to delete the attendee's node and update the orientation
  // capacity and open/closed status.
  $expires = time() - (2 * 24 * 60 * 60);
  $result = db_query("SELECT * from {node} n LEFT JOIN {content_type_orientation_attendee} o ON n.nid = o.nid WHERE n.type = 'orientation_attendee' AND n.created < %d AND o.field_attendee_confirmed_value = 0", $expires);

  while ($attendee = db_fetch_array($result)) {
    // Let's not delete any key users.
    $account = user_load($attendee['field_userid_uid']);
    // Make sure the account still exists.
    if (is_object($account)) {
      if (!user_access('administer psfc orientation', $account)) {
        user_delete(array(), $attendee['field_userid_uid']);
      }
    }
  }

  // Close old orientations.
  psfc_orientation_close_old();

  // Send reminder emails
  psfc_orientation_send_reminders();

  // Delete old blackout dates
  psfc_orientation_past_blackout_delete();
}

/**
 * Implementation of hook_user().
 */
function psfc_orientation_user($op, &$edit, &$account) {
  switch ($op) {
    case 'load' :
      // Add member statuses to the user object.
      if ($attendee = psfc_orientation_get_attendee_node($account)) {
        $account->member_status['orientation']['registered'] = TRUE;
        $account->member_status['orientation']['confirmed'] = $attendee->field_attendee_confirmed[0]['value'];
        $account->member_status['orientation']['attended'] = $attendee->field_attendee_attended[0]['value'];
      }
      else {
        $account->member_status['orientation']['registered'] = FALSE;
      }
      break;
    case 'delete' :
      // When users are deleted, we delete their attendee nodes if they have any.
      $result = db_query("SELECT nid from {content_type_orientation_attendee} WHERE field_userid_uid = %d", $account->uid);
      while ($nid = db_result($result)){
        node_delete($nid);
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function psfc_orientation_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#theme'] == 'confirm_form') {
    $form['actions']['cancel']['#value'] = '<div class="button-rounded"><span>'. $form['actions']['cancel']['#value'] . '</span></div>';
  }
  switch ($form_id) {
    case 'user_login':
      $form['submit']['#value'] = 'Sign In'; // Change button value.
      foreach(element_children($form)as $field) {
        unset($form[$field]['#description']);
      }
    break;
    case 'user_register':
      // We need to redirect sometime so we need our own submit.
      $form['#submit'][] = 'psfc_orientation_user_register_submit';
      // Only alter reg form on our custom signup page.
      if ($_GET['q'] == 'login') {
        $form['submit']['#value'] = t('Sign Up');  // Change button value.

        // Move name category to account.
        $form['profile_firstname'] = $form['Name']['profile_firstname'];
        $form['profile_lastname'] = $form['Name']['profile_lastname'];
        unset($form['profile_firstname']['#description']);
        unset($form['profile_lastname']['#description']);
        // Unset description and move all to $form.
        foreach(element_children($form['account'])as $field) {
          unset($form['account'][$field]['#description']);
          $form[$field] = $form['account'][$field];
        }
        // Lose the fieldsets.
        unset($form['Name']);
        unset($form['account']);
        //Put fields in order.
        $form['profile_firstname']['#weight'] = 1;
        $form['profile_lastname']['#weight'] = 2;
        $form['mail']['#weight'] = 3;
        $form['name']['#weight'] = 4;
        $form['pass']['#weight'] = 5;
      }
    break;
  }
}

/**
 * Extra submit function for user account creation
 */
function psfc_orientation_user_register_submit ($form, &$form_state) {
  $admin = user_access('administer users');
  if ($_GET['q'] == 'login' && !$admin) {
    // TODO: Remove the this riderict, in favor of more check/ diff redirect --ncm
    // User signed self up during orientation process and unset messages.
    $form_state['redirect'] = 'node/'. variable_get('psfc_orientation_new_user_from_orientation', '');
    drupal_get_messages();
  }
  elseif (!$admin) {
    // User signed self up outside of registration workflow and unset messages.
    $form_state['redirect'] = 'node/'. variable_get('psfc_orientation_new_user', '');
    drupal_get_messages();
  }
}

/**
 * Implementation of hook_views_api().
 */
function psfc_orientation_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'psfc_orientation'),
    //'path' => drupal_get_path('module', 'psfc_orientation') . '/includes',
  );
}

/**
 *  Wildcard loader function for hook_menu orientation id
 */
function psfc_orientation_orid_load($orid) {
  if (!is_numeric($orid)) {
    return FALSE;
  }
  $checked_orid = db_result(db_query("SELECT orid FROM {psfc_orientation_repeat_rules} WHERE orid = %d", $orid));
  if ($checked_orid == $orid) {
    return $orid;
  }
  return FALSE;
}

/**
 *  Wildcard loader function for hook_menu orientation blackout id
 *
 * @param $obid
 *   A black out date
 *
 * @return The blacked out data or FALSE
 */
function psfc_orientation_obid_load($obid) {
  if (!is_numeric($obid)) {
    return FALSE;
  }
  $checked_obid = db_result(db_query("SELECT obid FROM {psfc_orientation_blackout_days} WHERE obid = %d", $obid));
  if ($checked_obid == $obid) {
    return $obid;
  }
  return FALSE;
}

/**
 * Implementation of hook_nodeapi().
 */
function psfc_orientation_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'orientation_attendee') {
    $recipient = $node->field_email[0]['email'];
    // This is the attendee node.
    switch ($op) {
      case 'insert' :
        $account = user_load($node->field_userid[0]['uid']);
        $params['node'] = $node;
        $params['node']->confirm = psfc_orientation_confirm_url($account, 'confirm', NULL, FALSE);
        $params['node']->cancel = psfc_orientation_confirm_url($account, 'cancel', NULL, FALSE);
        // A new attendee as been created for an orientation and is confirmed.
        // This would have to have been created by an admin
        if ($node->field_attendee_confirmed[0]['value'] == TRUE) {
          drupal_mail('psfc_orientation', 'registration_confirmed', $recipient, language_default(), $params);
        }
        // Attendee was signed up by someone else, must confirm.
        // @TODO make sure we don't email an admin who created the attendee.
        else {
          drupal_mail('psfc_orientation', 'registration_not_confirmed', $recipient, language_default(), $params);
        }
        break;

      case 'delete' :
        $account = user_load($node->field_userid[0]['uid']);
        $params['node'] = $node;
        $params['node']->confirm = psfc_orientation_confirm_url($account, 'confirm', NULL, FALSE);
        $params['node']->cancel = psfc_orientation_confirm_url($account, 'cancel', NULL, FALSE);
        // Email the attendee.
        drupal_mail('psfc_orientation', 'registration_cancelled', $recipient, language_default(), $params);
        // Update the orientation nodes open/closed status. This will reopen
        // the orientation if it is closed.
        psfc_orientation_capacity($node->field_orientation_nid[0]['nid'], TRUE);
        break;
    }
  }
}

/**
 *  Temporary PSFC admin landing page
 *
 *  TODO: Move this functionality to a better place
 */
function psfc_orientation_temp_admin_land() {
  $output = l('Administer Orientation', 'admin/psfc/orientation');
  return $output;
}

/**
 *  Helper function to return information about an orientation  rule
 *
 * @param $orid
 * Required. The unique id of the orientation repeat rule
 *
 * @return a keyed array with all relevant information about a rule.
 */
function psfc_orientation_get_repeat_rule_info($orid) {
  $result = db_fetch_array(db_query("SELECT * FROM {psfc_orientation_repeat_rules} WHERE orid = %d", $orid));
  return $result;
}

/**
 *  Helper function to determine next repeated orienation
 *
 */
function psfc_orientation_determine_next_repeat($time) {
    $two_weeks = time() + ( 60 * 60 * 24 *14);
    $date = date('l F d', $two_weeks);
    $string = $date .' '. $time['hour'] .':'. $time['minute'] .' '. $time['ampm'];
    $next_orientation = strtotime($string);
  return $next_orientation;
}

/**
 * Helper function to split apart the time_of_day saved in orienation_rule
 */
function psfc_orientation_split_time_of_day($orid) {
  $info = psfc_orientation_get_repeat_rule_info($orid);
  $split0 = split(':', $info['time_of_day']);
  $split1 = split(' ', $split0[1]);

  $time = array();
  $time['hour'] = $split0[0];
  $time['minute'] = $split1[0];
  $time['ampm'] = $split1[1];

  return $time;
}

/**
 * Wrapper for theme function to display user's orientation status page
 *
 */
function psfc_orientation_status() {
  return theme('psfc_orientation_status');
}

/**
 * Menu callback for registration confirmed page.
 *
 */
function psfc_orientation_confirmed() {
  global $user;
  // Not logged in.
  if(!$user->uid) {
    drupal_goto();
  }

  $attendee = psfc_orientation_get_attendee_node($user);

  // User has not registered or is not confirmed.
  if(!$attendee || !$attendee->field_attendee_confirmed[0]['value']) {
    drupal_goto();
  }

  $orientation = node_load($attendee->field_orientation_nid[0]['nid']);
  $date = $orientation->field_date[0]['value'];

  $output = '<p>'. t('We will see you on:'). '</p>';
  $output .= theme_psfc_orientation_date_table($date);
  $text = node_load(variable_get('psfc_orientation_confirmation_thank_you', FALSE));
  if (is_object($text)) {
    drupal_set_title(t($text->title));
    unset($text->title);
    $output .= node_view($text);
    if (user_access('administer psfc orientation') && user_access('administer nodes')) {
      $output .= l('edit', "node/". variable_get('psfc_orientation_confirmation_thank_you', FALSE) ."/edit");
    }
  }
  return $output;
}

/**
 * Helper function to determine if there is already an orientation scheduled
 * for a time slot
 *
 * @param $time
 *
 * @return blooean TRUE if there there is an already scheduled orientation
 */
function psfc_orientation_orientation_exists($time) {
  $query = db_query('SELECT cto.field_date_value FROM {content_type_orientation} cto INNER JOIN {node} n ON cto.nid = n.nid AND cto.vid = n.vid WHERE n.status = %d AND cto.field_date_value = "%s"', 1, $time);
  if (db_result($query) == $time) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper function to determine if a date is blacked out
 *
 * @param $date a datestring formatted as YYY-MM-DD
 *
 *
 * @return boolean TRUE if $date is blacked out
 */
function psfc_orientation_orientation_blacked_out($date) {
  $date = $date .' 00:00:00';
  $query = db_query('SELECT blackout_date FROM {psfc_orientation_blackout_days} WHERE blackout_date = "%s"', $date);
  while ($result = db_fetch_array($query)) {
    if ($result['blackout_date'] == $date) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Build an orientation node
 *
 * @param $orientation_rule an orientation rule as built by
 *    psfc_orientation_get_repeat_rule_info().
 *
 * @param $time_value the tiime of the desired orientation in the format:
 *    YYYY-MM-DDTHH:MM:SS
 *
 * @return the node object of the new orientation.
 */
function psfc_orientation_node_build($orientation_rule, $time_value) {
  // declare a new node object
  $node = new stdClass();

  // set some values that will not change.
  $node->type = 'orientation';
  $node->uid = 1;
  $node->name = 'Admin User';
  $node->status = 1;
  $node->created = time();
  $node->changed = time();
  $node->comment = 0;
  $node->promote = 0;
  $node->moderate = 0;
  $node->sticky = 0;
  $node->tnid = 0;
  $node->translate = 0;
  $node->revision_uid = 1;
  $node->revision_timestamp = time();
  $node->body = variable_get('psfc_orientation_default_description', t('PSFC Orientations are blah blah blah'));
  $node->format = 1;

  // Fill in the values from the orientation rule
  $node->field_capacity = array(
    0 => array(
      'value' => $orientation_rule['capacity'],
    ),
  );

  $node->field_date = array(
    0 => array(
      'value' =>   $time_value,
      'timezone' => 'America/New_York',
      'timezone_db' => 'UTC',
      'date_type' => 'date',
    ),
  );

  $node->field_open = array(
    0 => array(
      'value' => 0,
    ),
  );

  $node->field_reminders = array(
    0 => array(
      'value' => 0,
    ),
  );

  // validate and save the node
  node_validate($node);
  node_submit($node);
  node_save($node);
  return $node;
}


/**
 * Build an attendee node
 *
 * @param $account the attendee user account
 *
 * @param $onid the node id for the orientation the attended will attend.
 * *
 * @return the node object of the new attendee.
 */
function psfc_orientation_node_build_attendee($account, $onid) {
  // declare a new node object
  $node = new stdClass();

  // set some values that will not change.
  $node->type = 'orientation_attendee';
  $node->uid = $account->uid;
  $node->name = $account->name;
  $node->status = 1;
  $node->created = time();
  $node->changed = time();
  $node->comment = 0;
  $node->promote = 0;
  $node->moderate = 0;
  $node->sticky = 0;
  $node->tnid = 0;
  $node->translate = 0;
  $node->revision_uid = 1;
  $node->revision_timestamp = time();
  $node->format = 1;

  // Fill in the values from the account
  $node->field_firstname = array(
    0 => array(
      'value' => $account->profile_firstname,
    ),
  );

  $node->field_lastname = array(
    0 => array(
      'value' => $account->profile_lastname,
    ),
  );

  $node->field_email = array(
    0 => array(
      'email' => $account->mail,
    ),
  );

  $node->field_orientation_nid = array(
    0 => array(
      'nid' => $onid,
    ),
  );

  $node->field_userid = array(
    0 => array(
      'uid' => $account->uid,
    ),
  );

  $node->field_attendee_confirmed = array(
    0 => array(
      'value' => 0,
    ),
  );

  // validate and save the node
  node_validate($node);
  node_submit($node);
  node_save($node);
  return $node;
}

/**
 * Helper function to count open slots in an orientation and close or reopen it.
 *
 * @param $node
 *   Either an orientation node object or node ID.
 * @param $close
 *   If TRUE the orientation node should be closed.
 * @return The number of open spaces remaining for the orientation.
 */
function psfc_orientation_capacity($node, $close = FALSE) {
  if(!is_object($node)){
    // We have to reset the node cache to get the latest count.
    $node = node_load($node, NULL, TRUE);
  }
  $count = isset($node->field_orientation_attendees[0]) ? $node->field_capacity[0]['value'] - count($node->field_orientation_attendees[0]['items']) : $node->field_capacity[0]['value'];

  // It's full. Close it if it's not already closed.
  if ($close && $count <= 0 && $node->field_open[0]['value'] == 0) {
    $node->field_open[0]['value'] = 1; // 0 is open, 1 is closed.
    node_save($node);
  }

  // It's not full, reopen it if it's not already open.
  if ($close && $count > 0 && $node->field_open[0]['value'] == 1) {
    $node->field_open[0]['value'] = 0; // 0 is open, 1 is closed.
    node_save($node);
  }

  return $count;
}

/**
 * Helper function to close past orientations. Called by cron.
 *
 */
function psfc_orientation_close_old() {
  $old = time() - 360;
  $result = db_query("SELECT n.nid FROM {content_type_orientation} cto INNER JOIN {node} n ON cto.nid = n.nid AND cto.vid = n.vid AND cto.field_open_value = 0 AND UNIX_TIMESTAMP(cto.field_date_value) < %d", $old);
  while ($nid = db_result($result)) {
    $node = node_load($nid);
    $node->field_open[0]['value'] = 1; // 0 is open, 1 is closed.
    node_save($node);
  }
}

/**
 * Helper function to check if user is already signed up for an open orientation.
 *
 * @param $uid
 *   User's uid to check.
 *
 * @return Boolean.
 */

function psfc_orientation_registered($uid) {
  if (db_result(db_query("SELECT COUNT(*) FROM {content_type_orientation_attendee} a LEFT JOIN {content_type_orientation} o ON a.field_orientation_nid_nid = o.nid WHERE o.field_open_value = 0 AND a.field_userid_uid = %d", $uid))) {
    return TRUE;
  }
  return FALSE;
}
/**
 * Helper function to check if user is already signed up for a particular
 *  orientation
 *
 * @param $uid
 *   User's uid to check.
 * @param $nid
 *   Orientation nid to check.
 *
 * @return Boolean.
 */
function psfc_orientation_registered_specific($uid, $nid) {
  if (db_result(db_query("SELECT COUNT(*) FROM {content_type_orientation_attendee} WHERE field_orientation_nid_nid = %d AND field_userid_uid = %d", $nid, $uid))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper function to create a signup link for an orientation.
 *
 * @param $nid
 *   The nid of the orientation node.
 *
 * @return A link starting the signup process or a link to the login/register page.
 */
function psfc_orientation_signup_link($nid) {
  global $user;
  // Return link to the orientation.
  if ($user->uid > 0) {
    $account = user_load($user->uid);
    $member_status = $account->member_status;
    if (psfc_orientation_registered_specific($account->uid, $nid)) {
      return '<div class="button-rounded"><span>'. l(t("Orientation Status"), 'join/orientation/status') . '</span></div>';
    }
    elseif ($member_status['orientation']['registered']) {
      return;
    }
    else {
      return '<div class="button-rounded"><span>' . l(t('Register for Orientation'), 'join/orientation/signup/session/'. $nid) .'</span></div>';
    }
  }
  return '<div class="button-rounded button-rounded-off"><span>'. t('Register for Orientation') .'</span></div><div class="must-login">' . l(t('Log In or Create an account'), '/login') . t(' to sign up for Orientation.') .'</div>';
}

/**
 * Callback function for the signup link.
 *
 * Let the user review the session details before we save.
 *
 * @param $nid
 *   The nid of the orientation node.
 */

function psfc_orientation_signup_session($onid) {
  global $user;
  // Is user already signed up?
  if (psfc_orientation_registered($user->uid) ) {
    drupal_goto('join/orientation/status/registered');
  }
  $orientation = node_load($onid);
  $output = '<div class="confirm-info-text">';
  $output .= t('You have selected the following Orientation Session:');
  $output .= '</div>';
  $output .= '<div class="confirm-info-date">';
  $output .= theme(psfc_orientation_date_table, $orientation->field_date[0]['value']);
  $output .= '</div>';
  $output .= '<div class="confirm-info-link"><div class="button-rounded"><span>';
  $output .= l(t('Yes, Register Me for This Orientation'), 'join/orientation/signup/session/register/'. $onid);
  $output .= '</span></div></div>';
  $output .= '<div class="confirm-info-link"><p>'. t('Or if this is not correct,') .'</p>';
  $output .= '<div class="button-rounded"><span>';
  $output .= l(t('Begin Registration Process Again'), 'join/orientation');
  $output .= '</span></div></div>';
  return $output;
}

/**
 * Callback function for the signup link.
 *
 * Write the registration to the db (add attendee node).
 *
 * @param $nid
 *   The nid of the orientation node.
 *
 */
function psfc_orientation_signup_session_register($onid) {
  global $user;

  // Is user already signed up?
  if (psfc_orientation_registered($user->uid) ) {
    drupal_goto('join/orientation/status');
  }
  // Create the attendee node for the logged in user, if not already registered
  // and there is space.
  if (psfc_orientation_capacity($onid, TRUE) >= 1) {
    profile_load_profile($user);
    psfc_orientation_node_build_attendee($user, $onid);
  }

  // No more spots open for logged in user!
  else {
    drupal_goto('node/'. variable_get('psfc_orientation_orientation_filled', ''));
  }

  // Logged in user is registered.
  drupal_goto('node/'. variable_get('psfc_orientation_confirm_orientation_page', ''));
}

/**
 * Menu callback for attendee confirm and cancel link.
 *
 * @param $uid
 *   Attendee's uid.
 * @param $timestamp
 *   Unix time when link was created.
 * @param $hassed_pass
 *   md5 hash of the attendee's password.
 * @param $action
 *   Confirm or cance the orientation registration.
 *
 */

function psfc_orientation_confirm($uid, $timestamp, $hashed_pass, $action) {
  // Check for active user and confirm hashed pass.
  if (is_numeric($uid) && $account = user_load(array('uid' => $uid, 'status' => 1))) {
    if ($hashed_pass == psfc_orientation_confirm_rehash($account->pass, $timestamp, $account->login)) {
      // Load the attendee node.
      if ($node = psfc_orientation_get_attendee_node($account)) {
        if ($action == 'confirm') {
          $node->field_attendee_confirmed[0]['value'] = 1;
          node_save($node);
          drupal_goto('join/orientation/thank-you-confirming-your-orientation-registration');
        }
        elseif ($action == 'cancel') {
          // show confirm form.
          return drupal_get_form('psfc_orientation_cancel_confirm', $node);
        }
      }
      // Account exists, but no attendee node. This should probably be a page
      // redirect and not a message.
      else {
        drupal_set_message(t('You have not registered for orientation, or your registration has expired or been cancelled.'));
        drupal_goto('join/orientation');
      }
    }
  }
  //No account or bad link. An attendee will get here if trying to confirm too
  // late. This should probably be a page redirect and not a message.
  drupal_set_message(t('There is no user for the operation you requested.'));
  drupal_goto('join/orientation');
}

/**
 * Confirm registration cancellation.
 */
function psfc_orientation_cancel_confirm($form_state, $node) {
  $form['#orientation_attendee_uid'] = $node->field_userid[0]['uid'];
  $form['#orientation_attendee_nid'] = $node->nid;
  $question = t('Confirm Your Cancellation');
  $path = 'join/orientation';
  $description = 'Are you sure you want to cancel your registration for new member orientation?<br /><br />';
  $yes = t('Yes, I Want to Cancel My Registration');
  $no = t('No, Please Do Not Cancel');
  return confirm_form($form, $question, $path, $description, $yes, $no, $name = 'confirm_cancellation');
}

/**
 * Confirm registration cancellation form submit.
 */
function psfc_orientation_cancel_confirm_submit($form, $form_state) {
  node_delete($form['#orientation_attendee_nid']);
  drupal_goto('node/'. variable_get('psfc_orientation_registrant_removed', ''));
}

/**
 * Generate a secure confirm/cancel link.
 *
 * @param $account
 *   Attendee's useraccount.
 * @param $action
 *   Confirm or cance the orientation registration.
 *
 * @return An absolute link.
 */
function psfc_orientation_confirm_url($account, $action,   $text = 'Click here to @action your orientation.', $l = TRUE) {
  $timestamp = time();
  if ($l) {
    return l(t($text, array('@action' => $action)), 'join/orientation/confirm/'. $account->uid .'/'. $timestamp .'/'. psfc_orientation_confirm_rehash($account->pass, $timestamp, $account->login) .'/'. $action, array('absolute' => TRUE));
  }
  // Used to format link for email tokens.
  else {
    return url('join/orientation/confirm/'. $account->uid .'/'. $timestamp .'/'. psfc_orientation_confirm_rehash($account->pass, $timestamp, $account->login) .'/'. $action, array('absolute' => TRUE));
  }
}

/**
 * Generate a hashed password.
 *
 * @param $password
 *   Attendee's password.
 * @param $timestamp
 *   Unix time of registration.
 * @param $login
 *   Unix time of attendee's first login. This was automatically set on reg.
 *
 * @return A hashed password.
 */
function psfc_orientation_confirm_rehash($password, $timestamp, $login) {
  return md5($timestamp . $password . $login);
}

/**
 * Helper function to load single attendee node.
 *
 * @param $account
 *   The attende.
 *
 * @return Node object.
 */

function psfc_orientation_get_attendee_node($account) {
  $result = db_query("SELECT nid FROM {content_type_orientation_attendee} WHERE field_userid_uid = %d", $account->uid);
  while ($nid = db_result($result)) {
    $nids[] = $nid;
  }
  if (count($nids) > 1) {
    // Oops, there are 2 or more registrations for this user. This should not
    // happen, but maybe an admin did it.
    drupal_set_message(t('There is a problem with your registration. Please contact the co-op.'));
    return FALSE;
  }
  elseif ($nids[0]) {
    return node_load($nids[0]);
  }
  return FALSE;
}

/**
 * Helper function to load attendee node.
 *
 * @param $oid
 *   The orientation node id.
 *
 * @return Array of node objects.
 */

function psfc_orientation_get_all_attendee_nodes($oid) {
  $attendees = array();
  $result = db_query("SELECT nid FROM {content_type_orientation_attendee} WHERE field_orientation_nid_nid = %d", $oid);
  while ($nid = db_result($result)) {
    $attendees[] = node_load($nid);
  }
  return $attendees;
}

/**
 * Theme a table with 1 orientation date.
 * *
 * @param $date
 *   The date of the orientation.
 */
function theme_psfc_orientation_date_table($date) {
  $date = strtotime($date);
  $headers = array('Date', 'Day', 'Time');
  $rows[] = array(
          '<span class = "mon">'. format_date($date, 'custom', 'M') .'</span>' . ' <span class = "date">'. format_date($date, 'custom', 'j') .'</span>',
          '<span class = "day">'. format_date($date, 'custom', 'l') .'</span>',
          '<span class = "time">'. format_date($date, 'custom', 'g:i') .'</span>' . '<span class = "meridiem">'. format_date($date, 'custom', 'A') .'</span>',
    );
  return theme('table', $headers, $rows, array('class' => 'odate-table'));
}

/**
 * Theme a the user's orientation status page.
 *
 */
function theme_psfc_orientation_status() {
  global $user;
  if (!$user->uid) {
    return t('Please login to the site to check you registration status.');
  }

  if (!$attendee = psfc_orientation_get_attendee_node($user)) {
    return t('You have created a user account, but are not registered for any upcoming Orientations.');
  }

  $orientation = node_load($attendee->field_orientation_nid[0]['nid']);

  $output = '<div class="status-info-text">';
//
// JM 2010-12-14 removed per Steve, ticket #126
//
//   if (arg(2) == 'registered') {
//     $output .= '<p>'. t('You are already registered for an oriententation session. Here are the details:'). '</p>';
//   }
  $output .= '<p>'. t('You have signed up for the following Orientation Session:'). '</p>';
  $output .= '</div>';

  $output .= '<div class="status-info-date">';
  $output .= theme(psfc_orientation_date_table, $orientation->field_date[0]['value']);
  $output .= '</div>';

  if (!$attendee->field_attendee_confirmed[0]['value']) {
    $output .= '<p>'. t('You are not yet confirmed. You should have received an email with confirmation instructions. You must confirm within 48 hours of registering or you will lose your reserved place.') .'</p>';
  }
  else {
    $output .= '<p>'. t('You orientation registration is confirmed. '). '</p>';
  }

  $output .= '<p>'. t('If this is not correct, please cancel and sign up again.');

  $output .= '<div class="button-rounded"><span>'. psfc_orientation_confirm_url($user, 'cancel', 'Cancel') . '</span></div>';

  return $output;
}
/**
 * Helper function to determine if now is the right time window to create
 * an orientation
 *
 * @param $time The unix timestamp of an orientation you are looking to create.
 * @param $range Optional The number of minutes after a time that an
 *  orientation should still get created.
 *
 * @return returns TRUE if it is okay to create the orientation
 */
function psfc_orientation_orientation_creation_window($time, $range = 15) {
  if (date('l') == date('l', $time) && date('G') == date('G', $time)) {
    $current_minute = date('i');
    $time_minute = date('i', $time);
    if ($current_minute - $time_minute <= $range)  {
      return TRUE;
    }
  }
  return FALSE;
}
/**
 * Helper function to delete past blackout days via cron
 */
function psfc_orientation_past_blackout_delete() {
  $q = db_query("SELECT * FROM {psfc_orientation_blackout_days}");

  $obids = array();
  while ($r = db_fetch_array($q)) {
    $date = strtotime($r['blackout_date']);
    if ($date < time()) {
      $obids[] = $r['obid'];
    }
  }
  foreach ($obids as $key => $obid) {
    db_query("DELETE FROM {psfc_orientation_blackout_days} WHERE obid = %d", $obid);
  }
}

/**
 * Helper function to pass a user's orientation status to
 * the member_data module
 *
 * @param $uid The user id for the the member status you are looking for
 *
 * @return A textual representation of the user/member's orientation status,
 *  or a 1 for a user who has attended an orientation
 */
function psfc_orientation_user_orientation_status($uid) {
  $user = user_load($uid);
  $member_status = $user->member_status;
  if (!$member_status['orientation']['registered']) {
    return t('You are not registered for an orientation.');
  }
  elseif ($member_status['orientation']['confirmed'] == 0) {
    return l(t('You have registered for an orientation and not confirmed'), 'join/orientation/status');
  }
  elseif ($member_status['orientation']['confirmed'] == 1  && !$member_status['orientation']['attended']) {
    return l(t('You are confirmed to attend an upcoming orientation'), 'join/orientation/status/registered');
  }
  elseif ($member_status['orientation']['attended'] == 1) {
    return 1;
  }
}

