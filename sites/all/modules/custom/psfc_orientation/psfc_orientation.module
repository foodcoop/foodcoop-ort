<?php
/**
 * @file PSFC Orientation module
 *./

/**
 * Implementation of hook_perm().
 */
function psfc_orientation_perm() {
  return array(
    'administer psfc orientation',
    'sign up for psfc orientation'
    );
}

/**
 * Implementation of hook_menu().
 */
function psfc_orientation_menu() {
  $items = array();

  // this should probably live in a generic helper module.
  // it lives here because this module got here first --nat
  $items['admin/psfc'] = array(
    'title' => 'PSFC Admin Page',
    'description' => 'An Admin landing page for psfc pages',
    'access arguments' => array( 'administer psfc orientation'),
    'page callback' => 'psfc_orientation_temp_admin_land',
  );
  $items['admin/psfc/orientation'] = array(
    'title' => 'Orientation',
    'description' => 'Allow coop workers to change orientation settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('psfc_orientation_admin_page'),
    'access callback' => 'user_access',
    'access arguments' => array( 'administer psfc orientation'),
    'file' => 'psfc_orientation.admin.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/psfc/orientation/overview'] = array(
    'title' => 'Orientation Settings',
    'description' => 'Allow coop workers to change orientation settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('psfc_orientation_admin_page'),
    'access callback' => 'user_access',
    'access arguments' => array( 'administer psfc orientation'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'psfc_orientation.admin.inc',
  );
  $items['admin/psfc/orientation/add-rule'] = array(
    'title' => 'Create Orientation Rule',
    'description' => 'Create a new orientation rule.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('psfc_orientation_admin_add_rule'),
    'access arguments' => array( 'administer psfc orientation'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'psfc_orientation.admin.inc',
    'weight' => 8,
  );
  $items['admin/psfc/orientation/delete-rule/%psfc_orientation_orid'] = array(
    'title' => 'Delete Orientation Rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('psfc_orientation_admin_delete_rule', 4),
    'access arguments' => array('administer psfc orientation'),
    'type' => MENU_CALLBACK,
    'file' => 'psfc_orientation.admin.inc',
  );
  $items['admin/psfc/orientation/edit-rule/%psfc_orientation_orid'] = array(
    'title' => 'Edit Orientation Rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('psfc_orientation_admin_edit_rule', 4),
    'access arguments' => array('administer psfc orientation'),
    'type' => MENU_CALLBACK,
    'file' => 'psfc_orientation.admin.inc',
  );
  $items['admin/psfc/orientation/add-blackout'] = array(
    'title' => 'Create a Blackout date',
    'description' => 'Orientations will not be automatically created on this date.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('psfc_orientation_add_blackout'),
    'access arguments' => array( 'administer psfc orientation'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'psfc_orientation.admin.inc',
    'weight' => 10,
  );
  $items['admin/psfc/orientation/delete-blackout/%psfc_orientation_obid'] = array(
    'title' => 'Delete a Blackout Date',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('psfc_orientation_delete_blackout', 4),
    'access arguments' => array('administer psfc orientation'),
    'type' => MENU_CALLBACK,
    'file' => 'psfc_orientation.admin.inc',
  );
  return $items;
}

/**
 * Implemetation of hook_cron().
 */
function psfc_orientation_cron() {
  $query = db_query("SELECT * FROM {psfc_orientation_repeat_rules}");
  while ($result = db_fetch_array($query)) {
    if ($result['day_of_week'] == date('l')) {
      $time = psfc_orienation_split_time_of_day($result['orid']);
      $next = psfc_orientation_determine_next_repeat($time);
      $date = date('Y-m-d', $next);
      // The hour needs to be saved GMT so add 4
      $hour = date('H', $next) + 4;
      $time = date(':i:s', $next);
      $time_value = $date .'T'. $hour . $time;
      if (!psfc_orientation_orientation_exists($time_value)) {
        $node = psfc_orientation_node_build($result, $time_value);
        if ($node->nid) {
          watchdog('psfc_orientation', 'Added an orientation for: '. $next, WATCHDOG_NOTICE);
        }
      }
    }
  }
}

/**
 *  Wildcard loader function for hook_menu orientation id
 */
function psfc_orientation_orid_load($orid) {
  if (!is_numeric($orid)) {
    return FALSE;
  }
  $checked_orid = db_result(db_query("SELECT orid FROM {psfc_orientation_repeat_rules} WHERE orid = %d", $orid));
  if ($checked_orid == $orid) {
    return $orid;
  }
  return FALSE;
}

/**
 *  Wildcard loader function for hook_menu orientation blackout id
 */
function psfc_orientation_obid_load($obid) {
  if (!is_numeric($obid)) {
    return FALSE;
  }
  $checked_obid = db_result(db_query("SELECT obid FROM {psfc_orientation_blackout_days} WHERE obid = %d", $obid));
  if ($checked_obid == $obid) {
    return $obid;
  }
  return FALSE;
}

/**
 *  Temporary PSFC admin landing page
 *
 *  TODO: Move this functionality to a better place
 */
function psfc_orientation_temp_admin_land() {
  $output = l('Administer Orientation', 'admin/psfc/orientation');
  return $output;
}

/**
 *  Helper function to return information about an orientation  rule
 *
 * @param $orid
 * Required. The unique id of the orientation repeat rule
 *
 * @return a keyed array with all relevant information about a rule.
 */
function psfc_orientation_get_repeat_rule_info($orid) {
  $result = db_fetch_array(db_query("SELECT * FROM {psfc_orientation_repeat_rules} WHERE orid = %d", $orid));
  return $result;
}

/**
 *  Helper function to determine next repeated orienation
 */
function psfc_orientation_determine_next_repeat($time) {
    $two_weeks = time() + ( 60 * 60 * 24 *14);
    $date = date('l F d', $two_weeks);
    $string = $date .' '. $time['hour'] .':'. $time['minute'] .' '. $time['ampm'];
    $next_orientation = strtotime($string);
  return $next_orientation;
}

/**
 * Helper function to split apart the time_of_day saved in orienation_rule
 */
function psfc_orienation_split_time_of_day($orid) {
  $info = psfc_orientation_get_repeat_rule_info($orid);
  $split0 = split(':', $info['time_of_day']);
  $split1 = split(' ', $split0[1]);

  $time = array();
  $time['hour'] = $split0[0];
  $time['minute'] = $split1[0];
  $time['ampm'] = $split1[1];

  return $time;
}

/**
 * Helper function to determine if there is already an orientation scheduled
 * for a time slot
 *
 * @param $time
 *
 * @return returns TRUE if there there is an already scheduled orientation
 */
function psfc_orientation_orientation_exists($time) {
  $query = db_query('SELECT cto.field_date_value FROM {content_type_orientation} cto INNER JOIN {node} n ON cto.nid = n.nid AND cto.vid = n.vid WHERE n.status = %d AND cto.field_date_value = "%s"', 1, $time);
  if (db_result($query) == $time) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Build an orientation node
 *
 * @param $orientation_rule an orientation rule as built by
 *    psfc_orientation_get_repeat_rule_info().
 *
 * @param $time_value the tiime of the desired orientation in the format:
 *    YYYY-MM-DDTHH:MM:SS
 *
 * @return the node object of the new orientation.
 */
function psfc_orientation_node_build($orientation_rule, $time_value) {
  // declare a new node object
  $node = new stdClass();

  // set some values that will not change.
  $node->type = 'orientation';
  $node->uid = 1;
  $node->status = 1;
  $node->created = time();
  $node->changed = time();
  $node->comment = 0;
  $node->promote = 0;
  $node->moderate = 0;
  $node->sticky = 0;
  $node->tnid = 0;
  $node->translate = 0;
  $node->revision_uid = 1;
  $node->revision_timestamp = time();
  $node->body = variable_get('psfc_orientation_default_description', t('PSFC Orientations are blah blah blah'));
  $node->format = 1;

  // Fill in the values from the orientation rule
  $node->field_capacity = array(
    0 => array(
      'value' => $orientation_rule['capacity'],
    ),
  );

  $node->field_date = array(
    0 => array(
      'value' =>   $time_value,
      'timezone' => 'America/New_York',
      'timezone_db' => 'UTC',
      'date_type' => 'date',
    ),
  );

  $node->field_open = array(
    0 => array(
      'value' => 0,
    ),
  );

  // validate and save the node
  node_validate($node);
  node_submit($node);
  node_save($node);
  return $node;
}