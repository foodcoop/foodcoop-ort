<?php

/**
 * @file tests for psfc_orientation module
 *
 * Running tests via drush and scripts/run-tests.sh doesn't seem to work properly.
 * It doesn't get the node via drupalGet. Running via the web interface works 
 * though: Configuration -> Testing.
 */

/**
 * PsfcOrientationCase tests orientation functions.
 */
class PsfcOrientationTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'PSFC Orientation module tests',
      'description' => 'Tests the proper functioning of the orientation module.',
      'group' => 'PSFC'
    );
  }

  function setUp() {
    parent::setUp(array('psfc_orientation_features', 'psfc_user_fields', 'views_bulk_operations'));
  }

  function tearDown() {
    parent::tearDown();
  }
  /**
   * Test creation of orientations
   *
   * These tests should demonstrate that the cron job code that automatically
   * creates orientations is working properly.
   */
  function testCreateOrientation() {
    // Make up an arbitrary repeat rule and test to ensure it gets created
    // using the functions used by the cron job.
    $rule = array('day_of_week' => 'Thursday', 'time_of_day' => '5:30 am', 'capacity' => 10);
    $nid = psfc_orientation_create_based_on_repeat_rule($rule);

    // See if an orientation node was created for the right date.
    $from = strtotime("Last Thursday");
    $time = array('hour' => 5, 'minute' => 30, 'ampm' => 'am');
    $next_ort = psfc_orientation_determine_next_repeat($time, $from);
    // Convert $next_ort from timestamp to value that should be displayed
    // on the page.
    $date_string =  date("l, F j, Y - g:ia", $next_ort);
    // Go to the page that should exist.
    $this->drupalGet("node/$nid");
    $this->assertResponse(200, 'Orientation was created and is accessible.');
    $this->assertText($date_string, "Orientation was created with the proper date." );

    // Now, ensure that we don't create orientations on black out dates.
    $from = strtotime("Last Friday");
    $time = array('hour' => 9, 'minute' => 30, 'ampm' => 'am');
    $next_ort = psfc_orientation_determine_next_repeat($time, $from);
    // Create a blackout date
    $id = psfc_orientation_insert_blackout_date(date('Y-m-d', $next_ort));
    // Try to create a repeat rule for this date.
    $rule = array('day_of_week' => 'Friday', 'time_of_day' => '9:30 am', 'capacity' => 10);
    $nid = psfc_orientation_create_based_on_repeat_rule($rule);
    $this->assertFalse($nid, "Orientation not created during black out time.");

  }

  /**
   * Ensure orientations are closed 2 hours prior to start.
   */
  function testCloseOrientationTwoHoursPriorToStart() {
    $this->orientationCloseTestHelper(125, FALSE);
    $this->orientationCloseTestHelper(119, TRUE);
  }

  /**
   * Ensure orientation status opens if cancelation happens.
   *
   */
  function testReOpenOrientationOnCancellation() {
    $orientation_rule = array('capacity' => 1);
    // Schedule it.
    $time = time();
    $orientation_wrapper = psfc_orientation_node_build($orientation_rule, $time);
    $node_created = FALSE;
    $orientation_nid = $orientation_wrapper->nid->value();
    if (intval($orientation_nid) > 0) {
      $node_created = TRUE;
    }
    $this->assertTrue($node_created, "Orientation node to test cancellation was created.");

    // Now add an attendee. Since the capacity is one, this should cause it to be closed.
    // Create the user.
    $this->privileged_user = $this->drupalCreateUser();

    $account_wrapper = entity_metadata_wrapper('user', $this->privileged_user);
    $field_collection = entity_create('field_collection_item', array('field_name' => 'field_fullname'));
    $field_collection->setHostEntity('user', $this->privileged_user);

    $cwrapper = entity_metadata_wrapper('field_collection_item', $field_collection);
    $cwrapper->field_firstname->set("Joe");
    $cwrapper->field_lastname->set("Washere");
    $cwrapper->save();

    $attendee_wrapper = psfc_orientation_node_build_attendee($this->privileged_user, $orientation_nid);
    $attendee_nid = $attendee_wrapper->nid->value();

    // Reload the orientation node.
    unset($orientation_wrapper);
    $orientation_wrapper = $this->orientationNodeLoader($orientation_nid);

    // Ensure orientation is now closed.
    $closed = $orientation_wrapper->field_orientation_closed->value();
    $this->assertEqual($closed, 1, "Orientation node was closed when last attendee registered.");

    // Now cancel.
    psfc_orientation_cancel_registration($attendee_nid);

    // Again reload orientation 
    unset($orientation_wrapper);
    $orientation_wrapper = $this->orientationNodeLoader($orientation_nid);

    // Ensure orientation is now closed.
    $closed = $orientation_wrapper->field_orientation_closed->value();
    $this->assertEqual($closed, 0, "Orientation node was re-opened when last attendee cancelled.");

  }

  /**
   * Helper for testing auto close of orientations.
   *
   */
  function orientationCloseTestHelper($minutes, $status) {
    $orientation_rule = array('capacity' => 10);
    // Schedule it.
    $time = time() + (60 * $minutes);
    $node_wrapper = psfc_orientation_node_build($orientation_rule, $time);
    $node_created = FALSE;
    $nid = $node_wrapper->nid->value();
    if (intval($nid) > 0) {
      $node_created = TRUE;
    }
    $this->assertTrue($node_created, "Orientation node to test 2 hour closure was created.");

    // Ensure it is open. The "closed" field is 0 when it is open and
    // 1 it is closed.
    $closed = $node_wrapper->field_orientation_closed->value();
    $this->assertEqual($closed, 0, "Orientation node is open on creation.");

    // Now this function should close it (or not, depending on minutes);
    psfc_orientation_close_orientations_starting_in_two_hours();
 
    # Re-load the newly updated node and ensure it is closed.
    unset($node_wrapper);
    $node_wrapper = $this->orientationNodeLoader($nid);
    
    $closed = $node_wrapper->field_orientation_closed->value();
    if($status == TRUE) {
      $this->assertEqual($closed, 1, "Orientation node was auto closed because it is happening in less than 2 hours.");
    }
    else {
      $this->assertEqual($closed, 0, "Orientation node was not auto closed because it is happening in more than 2 hours.");
    }
  }

  /**
   * Helper file to load a node wrapper
   */
  function orientationNodeLoader($nid) {
    $vid = NULL;
    $reset = TRUE;
    $node = node_load($nid, $vid, $reset);
    $node_wrapper = entity_metadata_wrapper('node', $node);

    // Make sure we were properly re-loaded
    $node_created = FALSE;
    $reloaded_nid = $node_wrapper->nid->value();
    if (intval($reloaded_nid) > 0) {
      $node_created = TRUE;
    }
    $this->assertTrue($node_created, "Orientation node to test 2 hour closure was reloaded.");

    // Make sure it's the same
    $reloaded_nid_is_same = FALSE;
    if ($reloaded_nid == $nid) {
      $reloaded_nid_is_same = TRUE;
    }
    $this->assertTrue($reloaded_nid_is_same, "Orientation node to test 2 hour closure reloaded is the same nid as original.");

    return $node_wrapper;
  }
}


