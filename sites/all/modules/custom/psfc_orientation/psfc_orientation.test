<?php

/**
 * @file tests for psfc_orientation module
 *
 * Run tests via drush - but be sure to pass the --uri option, e.g.:
 * drush test-run PsfcOrientationCase --uri=ort7.hobo
 */

/**
 * PsfcOrientationCase tests orientation functions.
 */
class PsfcOrientationCase extends DrupalWebTestCase {
  private $nids_to_delete = array();
  public static function getInfo() {
    return array(
      'name' => 'PSFC Orientation module tests',
      'description' => 'Tests the proper functioning of the orientation module.'
    );
  }

  function setUp() {
    parent::setUp(array('psfc_orientation_features', 'psfc_user_fields'));
  }

  function tearDown() {
    while(list(, $nid) = each($this->nids_to_delete)) {
      node_delete($nid);
    }
    parent::tearDown();
  }
  /**
   * Test creation of orientations
   *
   * These tests should demonstrate that the cron job code that automatically
   * creates orientations is working properly.
   */
  function testCreateOrientation() {
    // Make up an arbitrary repeat rule and test to ensure it gets created
    // using the functions used by the cron job.
    $rule = array('day_of_week' => 'Thursday', 'time_of_day' => '5:30 am', 'capacity' => 10);
    $nid = psfc_orientation_create_based_on_repeat_rule($rule);

    // See if an orientation node was created for the right date.
    $from = strtotime("Last Thursday");
    $time = array('hour' => 5, 'minute' => 30, 'ampm' => 'am');
    $next_ort = psfc_orientation_determine_next_repeat($time, $from);
    // Convert $next_ort from timestamp to value that should be displayed
    // on the page.
    $date_string =  date("l, F j, Y - g:ia", $next_ort);
    // Go to the page that should exist.
    $this->drupalGet("node/$nid");
    $this->assertResponse(200, 'Orientation was created and is accessible.');
    $this->assertText($date_string, "Orientation was created with the proper date." );

    // Now, ensure that we don't create orientations on black out dates.
    $from = strtotime("Last Friday");
    $time = array('hour' => 9, 'minute' => 30, 'ampm' => 'am');
    $next_ort = psfc_orientation_determine_next_repeat($time, $from);
    // Create a blackout date
    $id = psfc_orientation_insert_blackout_date(date('Y-m-d', $next_ort));
    // Try to create a repeat rule for this date.
    $rule = array('day_of_week' => 'Friday', 'time_of_day' => '9:30 am', 'capacity' => 10);
    $nid = psfc_orientation_create_based_on_repeat_rule($rule);
    $this->assertFalse($nid, "Orientation not created during black out time.");

  }

}


