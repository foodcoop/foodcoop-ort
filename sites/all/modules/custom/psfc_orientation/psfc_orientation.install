<?php
/**
 * @file
 */

/**
 * Implements hook_uninstall().
 */
function psfc_orientation_uninstall() {
  // Remove all nodes.
  psfc_orientation_delete_default_content();

  // Restore front page
  $site_frontpage = variable_get('psfc_orientation_old_site_frontpage', NULL);
  if(!is_null($site_frontpage)) {
    // We set the old front page to an empty string if it didn't previously exist
    // (which is the Drupal default).
    if($site_frontpage == '') {
      variable_delete('site_frontpage');
    } 
    else {
      variable_set('site_frontpage', $site_frontpage);
    }
  }
  // Remove site variables.
  $query = db_query('SELECT name FROM variable WHERE name LIKE :varname', array(':varname' => db_like('psfc_orientation_') .'%'));
  foreach ($query as $result) {
    variable_del($result->name);
  }
}

/**
 * Implements hook_install().
 */
function psfc_orientation_install() {
  psfc_orientation_install_default_content();
  psfc_orientation_init_logintoboggan_settings();
  psfc_orientation_setup_blocks();
  psfc_orientation_setup_repeating_orientation_rules();
}

/**
 * Setup orientation rules
 */
function psfc_orientation_setup_repeating_orientation_rules() {
  require_once(drupal_get_path('module', 'psfc_orientation') . '/psfc_orientation.admin.inc');
  $values = array(
    'day_of_week' => 'Monday',
    'hour' => 7,
    'min' => 30,
    'ampm' => 'pm',
    'capacity' => 20
  );
  psfc_orientation_add_rule($values);
  $values = array(
    'day_of_week' => 'Wednesday',
    'hour' => 10,
    'min' => '00',
    'ampm' => 'am',
    'capacity' => 20
  );
  psfc_orientation_add_rule($values);
  $values = array(
    'day_of_week' => 'Sunday',
    'hour' => 4,
    'min' => '00',
    'ampm' => 'pm',
    'capacity' => 20
  );
  psfc_orientation_add_rule($values);
}

/**
 * Setup our default blocks
 */
function psfc_orientation_setup_blocks() {
  // Enable our two blocks
  db_update('block')
    ->fields(array(
      'status' => 1,
      'region' => 'sidebar_first',
    ))
    ->condition('module', 'psfc_orientation')
    ->condition(db_or()->condition('delta', 'overview')->condition('delta', 'login_or_create_account'))
    ->condition('theme', 'bartik')
    ->execute();
  // Disable the default user login one
  db_update('block')
    ->fields(array(
      'status' => 0,
    ))
    ->condition('module', 'user')
    ->condition('delta', 'login')
    ->condition('theme', 'bartik')
    ->execute();

  // Flush cache
  cache_clear_all();
}
/**
 * Install default content
 */
function psfc_orientation_install_default_content() {
  // Ensure default nodes are created.
  $dir = DRUPAL_ROOT . '/' . drupal_get_path('module', 'psfc_orientation') . '/default-content';
  $files = scandir($dir);
  $new_front_page = NULL;
  while(list(,$file) = each($files)) {
    // This directory contains three files for each node we want to import
    // (title, body and alias). The files are named after the variable 
    // name their nid will be saved as (minus the psfc_orientation prefix), 
    // e.g. no_orientation.title, no_orientation.body, no_orientation.alias). 
    // We want to only scan for xxx.title and we'll find the rest of the file 
    // after we get the variable name.
    if(preg_match("/^([a-z_]+)\.title$/", $file, $matches)) {
      $variable_name = $matches[1];
      $nid = variable_get('psfc_orientation_' . $variable_name, NULL);
      if(!is_null($nid)) {
        if(psfc_orientation_nid_exists($nid)) {
          // Don't re-import
          continue;
        }
      }
      $title = file_get_contents("${dir}/${variable_name}.title");
      $body = file_get_contents("${dir}/${variable_name}.body");
      $alias = file_get_contents("${dir}/${variable_name}.alias");
      $node = entity_create('node', array('type' => 'page'));
      $node->path['pathauto'] = FALSE;
      $node->path['alias'] = $alias;
      $node_wrapper = entity_metadata_wrapper('node', $node);
      // print_r($node_wrapper->getPropertyInfo());
      $node_wrapper->author->set(0);
      $node_wrapper->status->set(1);
      $node_wrapper->comment->set(0);
      $node_wrapper->promote->set(0);
      $node_wrapper->sticky->set(0);
      $node_wrapper->title->set($title);
      $node_wrapper->body->set(array('value' => $body, 'format' => 'psfc_html_filter'));
      // $node_wrapper->alias->set($alias);
      $node_wrapper->save();
      $nid = $node_wrapper->nid->value();
      variable_set('psfc_orientation_' . $variable_name, $nid);
      if($variable_name == 'join_overview') {
        $new_front_page = $alias;
      }
    }
  }
  if(!is_null($new_front_page)) {
    $old_frontpage = variable_get('site_frontpage', '');
    variable_set('psfc_orientation_old_site_frontpage', $old_frontpage);
    variable_set('site_frontpage', 'join/overview');
  }
}


/**
 * Initialize our default settings for the logintoboggan module
 **/
function psfc_orientation_init_logintoboggan_settings() {
  $settings = array(
    'logintoboggan_confirm_email_at_registration' => '1',
    'logintoboggan_immediate_login_on_register' =>  '1', 
    // role 5 should be pre-auth role
    'logintoboggan_pre_auth_role' => 5, 
    // user register should allow visitors to register without
    // approval
    'user_register' => 1,
    'user_email_verification' => FALSE
  );
  while(list($k, $v) = each($settings)) {
    variable_set($k, $v);
  }
}

/**
 * Delete all created content. Should be run on uninstall.
 */
function psfc_orientation_delete_default_content() {
  $dir = DRUPAL_ROOT . '/' . drupal_get_path('module', 'psfc_orientation') . '/default-content';
  $files = scandir($dir);
  while(list(,$file) = each($files)) {
    // This directory contains three files for each node we  imported
    // (title, body and alias). The files are named after the variable 
    // name their nid will be saved as (minus the psfc_orientation prefix), 
    // e.g. no_orientation.title, no_orientation.body, no_orientation.alias). 
    // We want to only scan for xxx.title.
    if(preg_match("/^([a-z_]+)\.title$/", $file, $matches)) {
      $variable_name = $matches[1];
      $nid = variable_get('psfc_orientation_' . $variable_name, NULL);
      if(!is_null($nid)) {
        if(psfc_orientation_nid_exists($nid)) {
          node_delete($nid);
        }
      }
    }
  }
}
/**
 * Helper function to determine if node with given
 * nid exists.
 *
 * @param - integer, nid - the nid to check
 * @return - boolean, whether it exists or not
 */
function psfc_orientation_nid_exists($nid) {
  $node = node_load($nid);
  $result = db_query("SELECT count(nid) FROM {node} WHERE nid = :nid", array(':nid' => $nid));
  if($result->fetchField(0) == 0) return FALSE;
  return TRUE;
}

/**
 * Implements hook_schema().
 */
function psfc_orientation_schema() {
  $schema['psfc_orientation_repeat_rules'] = array(
    'description' => 'PSFC Orientation repeat',
    'fields' => array(
      'orid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique Orientation Rule ID.',
      ),
      'day_of_week' => array(
        'type' => 'text',
        'size' => 'tiny',
        'description' => 'The day of the week of an orientation',
      ),
      'time_of_day' => array(
        'type' => 'text',
        'size' => 'tiny',
        'description' => 'The time of an orientation',
      ),
      'capacity' => array(
        'type' => 'int',
        'size' => 'tiny',
        'description' => 'Capacity of the orientation',
      ),
    ),
    'primary key' => array('orid'),
  );

  $schema['psfc_orientation_blackout_days'] = array(
    'description' => 'PSFC Orientation Blackout dates',
    'fields' => array(
      'obid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique Orientation Blackout date ID.',
      ),
      'blackout_date' => array(
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'not null' => TRUE,
        'description' => 'An orientation blackout date.',
      ),
    ),
    'primary key' => array('obid'),
  );

  return $schema;
}
